Function,EW,Signature,Brief
:c:func:`bfp_s16_init()`               ,  , ":math:`(\mathbb{V \times S}) \to \mathbb{V}`              ",  Initialize (static)
:c:func:`bfp_s16_alloc()`              ,  , ":math:`\varnothing \to \mathbb{V}`                        ",  Initialize (dynamic)
:c:func:`bfp_s16_dealloc()`            ,  , ":math:`\mathbb{V} \to \mathbb{\varnothing}`               ",  Deinitialize
:c:func:`bfp_s16_set()`                , x, ":math:`(\mathbb{V \times S}) \to \mathbb{V}`              ",  Set All Elements
:c:func:`bfp_s16_use_exponent()`       ,  , ":math:`(\mathbb{V \times S}) \to \mathbb{V}`              ",  Force Exponent
:c:func:`bfp_s16_headroom()`           ,  , ":math:`\mathbb{V} \to \mathbb{S}`                         ",  Get Headroom
:c:func:`bfp_s16_shl()`                , x, ":math:`(\mathbb{V \times S}) \to \mathbb{V}`              ",  Shift Mantissas
:c:func:`bfp_s16_add()`                , x, ":math:`(\mathbb{V \times V}) \to \mathbb{V}`              ",  Add Vector
:c:func:`bfp_s16_add_scalar()`         ,  , ":math:`(\mathbb{V \times S}) \to \mathbb{V}`              ",  Add Scalar
:c:func:`bfp_s16_sub()`                , x, ":math:`(\mathbb{V \times V}) \to \mathbb{V}`              ",  Subtract Vector
:c:func:`bfp_s16_mul()`                , x, ":math:`(\mathbb{V \times V}) \to \mathbb{V}`              ",  Multiply Vector
:c:func:`bfp_s16_macc()`               , x, ":math:`(\mathbb{V \times V \times V}) \to \mathbb{V}`     ",  Multiply-Accumulate
:c:func:`bfp_s16_nmacc()`              , x, ":math:`(\mathbb{V \times V \times V}) \to \mathbb{V}`     ",  Negated Multiply-Accumulate
:c:func:`bfp_s16_scale()`              ,  , ":math:`(\mathbb{V \times S}) \to \mathbb{V}`              ",  Multiply Scalar
:c:func:`bfp_s16_abs()`                , x, ":math:`\mathbb{V} \to \mathbb{V}`                         ",  Absolute Values
:c:func:`bfp_s16_sum()`                ,  , ":math:`\mathbb{V} \to \mathbb{S}`                         ",  Sum Elements
:c:func:`bfp_s16_dot()`                ,  , ":math:`(\mathbb{V \times V}) \to \mathbb{S}`              ",  Inner Product
:c:func:`bfp_s16_clip()`               , x, ":math:`(\mathbb{V \times S \times S}) \to \mathbb{V}`     ",  Clip Bounds
:c:func:`bfp_s16_rect()`               , x, ":math:`\mathbb{V} \to \mathbb{V}`                         ",  Rectify Elements
:c:func:`bfp_s16_to_bfp_s32()`         , x, ":math:`\mathbb{V} \to \mathbb{V}`                         ",  Convert to 32-bit
:c:func:`bfp_s16_sqrt()`               , x, ":math:`\mathbb{V} \to \mathbb{V}`                         ",  Square Root
:c:func:`bfp_s16_inverse()`            , x, ":math:`\mathbb{V} \to \mathbb{V}`                         ",  Multiplicative Inverse
:c:func:`bfp_s16_abs_sum()`            ,  , ":math:`\mathbb{V} \to \mathbb{V}`                         ",  Absolute Sum Elements
:c:func:`bfp_s16_mean()`               ,  , ":math:`\mathbb{V} \to \mathbb{V}`                         ",  Vector Mean Value
:c:func:`bfp_s16_energy()`             ,  , ":math:`\mathbb{V} \to \mathbb{S}`                         ",  Vector Energy
:c:func:`bfp_s16_rms()`                ,  , ":math:`\mathbb{V} \to \mathbb{S}`                         ",  Vector RMS Value
:c:func:`bfp_s16_max()`                ,  , ":math:`\mathbb{V} \to \mathbb{S}`                         ",  Vector Max Element
:c:func:`bfp_s16_min()`                ,  , ":math:`\mathbb{V} \to \mathbb{S}`                         ",  Vector Min Element
:c:func:`bfp_s16_max_elementwise()`    , x, ":math:`(\mathbb{V \times V}) \to \mathbb{V}`              ",  Elementwise Max
:c:func:`bfp_s16_min_elementwise()`    , x, ":math:`(\mathbb{V \times V}) \to \mathbb{V}`              ",  Elementwise Min
:c:func:`bfp_s16_argmax()`             ,  , ":math:`\mathbb{V} \to \mathbb{S}`                         ",  Max Element Index
:c:func:`bfp_s16_argmin()`             ,  , ":math:`\mathbb{V} \to \mathbb{S}`                         ",  Min Element Index
:c:func:`bfp_s16_accumulate()`         , x, ":math:`(\mathbb{V \times V}) \to \mathbb{V}`              ", Elementwise Accumulate
